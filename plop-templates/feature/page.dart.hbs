import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:get_it/get_it.dart';
import '../../../domain/entities/{{snakeCase name}}/{{snakeCase name}}.dart';
import '../../cubit/{{snakeCase name}}/{{snakeCase name}}_cubit.dart';
import '../../cubit/{{snakeCase name}}/{{snakeCase name}}_state.dart';

@RoutePage()
class {{pascalCase name}}Page extends StatelessWidget {
  const {{pascalCase name}}Page({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocProvider<{{pascalCase name}}Cubit>(
      create: (_) => GetIt.I<{{pascalCase name}}Cubit>()..loadAll{{pascalCase name}}s(),
      child: const _{{pascalCase name}}View(),
    );
  }
}

class _{{pascalCase name}}View extends StatelessWidget {
  const _{{pascalCase name}}View();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('{{titleCase name}}s'),
      ),
      body: BlocBuilder<{{pascalCase name}}Cubit, {{pascalCase name}}State>(
        builder: (context, state) {
          return state.when(
            initial: () => const SizedBox(),
            loading: () => const Center(child: CircularProgressIndicator()),
            success: (items) => _{{pascalCase name}}List(items: items),
            error: (message) => Center(child: Text(message)),
          );
        },
      ),
    );
  }
}

class _{{pascalCase name}}List extends StatelessWidget {
  const _{{pascalCase name}}List({required this.items});

  final List<{{pascalCase name}}> items;

  @override
  Widget build(BuildContext context) {
    if (items.isEmpty) {
      return const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Icon(Icons.list, size: 64, color: Colors.grey),
            SizedBox(height: 16),
            Text(
              'No {{titleCase name}}s',
              style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
            ),
            SizedBox(height: 8),
            Text(
              'No items available',
              style: TextStyle(color: Colors.grey),
            ),
          ],
        ),
      );
    }

    return ListView.separated(
      padding: const EdgeInsets.all(16),
      itemCount: items.length,
      separatorBuilder: (context, index) => const Divider(),
      itemBuilder: (context, index) {
        final item = items[index];
        return ListTile(
          title: Text(item.displayName),
          subtitle: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              if (item.description != null)
                Text(item.description!),
              if (item.address != null)
                Text(item.address!),
              if (item.phoneNumber != null)
                Text(item.phoneNumber!),
            ],
          ),
          trailing: item.localizedCategory != null 
            ? Chip(label: Text(item.localizedCategory!))
            : null,
          onTap: () {
          },
        );
      },
    );
  }
} 